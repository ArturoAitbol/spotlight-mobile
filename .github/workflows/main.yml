name: tekvizion 360 CI/CD
on:
  workflow_dispatch:
  push:
    branches: [main]
    paths-ignore:
      - ".github/**"

env:
  JAVA_VERSION: "11"
  WORKING_DIR: "./app"
  android_version_code: 0
  ios_version_code: 0

jobs:
  android-test:
    runs-on: macos-latest
    defaults:
      run:
        working-directory: ./app
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Setup Java Sdk ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: npm install

      - name: Install ionic
        run: npm install -g @ionic/cli
        
      - name: Install Appium
        run: |
          npm install -g appium@next
          appium driver install uiautomator2
          chmod +x ./android/gradlew
          sed 's,http://localhost:7071/v1.0,https://tekvlicenseserverpocfunction.azurewebsites.net/v1.0,g' src/environments/environment.ts > changed.ts && mv changed.ts src/environments/environment.ts
          appium &
      ##### Should reduce times
      - name: Gradle cache
        uses: gradle/gradle-build-action@v2

      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-29

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -accel on
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."
      ###### Should reduce times
      - name: Run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          target: google_apis
          arch: x86_64
          profile: pixel_xl
          cores: 2
          ram-size: 5120M
          sdcard-path-or-size: 2000M
          avd-name: Pixel
          force-avd-creation: false
          # emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -accel on
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -accel on #ORIGINAL
          disable-animations: true
          working-directory: ./app
          script: |
            ionic capacitor run android --no-sync --target Pixel
            mvn test -PandroidTests -f ../tests/pom.xml -DdeviceUDID="emulator-5554" -q

      - name: Archive test results
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: android-functional-test-report
          path: tests/reports

  # ios-test:
  #   runs-on: macos-latest
  #   defaults:
  #     run:
  #       working-directory: ./app
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v3

  #     - name: Install dependencies
  #       run: npm install

  #     - name: Install ionic
  #       run: npm install -g @ionic/cli

  #     - name: Install Appium
  #       run: |
  #         npm install -g appium@next
  #         appium driver install xcuitest
  #         sed 's,http://localhost:7071/v1.0,https://tekvlicenseserverpocfunction.azurewebsites.net/v1.0,g' src/environments/environment.ts > changed.ts && mv changed.ts src/environments/environment.ts
  #         appium &
  #     - name: emulators list
  #       run: ionic cap run ios --list

  #     - name: Set device_id
  #       run: echo "DEVICE_ID=$(ionic cap run ios --list |  grep 'iPhone 13' | grep -v 'mini' | grep -v 'Max' | grep -v '13 (' | cut -d "|" -f3 | cut -d " " -f2)" >> $GITHUB_ENV

  #     - name: run emulator
  #       working-directory: ${{ env.WORKING_DIR }}
  #       run: ionic capacitor run ios --no-sync --target ${{ env.DEVICE_ID }}

  #     - name: Run functional tests
  #       run: mvn test -PiosTests -f ../tests/pom.xml -DdeviceUDID=${{ env.DEVICE_ID }} -q

  #     - name: Archive test results
  #       uses: actions/upload-artifact@v3
  #       if: success() || failure()
  #       with:
  #         name: ios-functional-test-report
  #         path: ${{ github.workspace }}/tests/reports

  # generate-release:
  #   name: Generate release with code
  #   needs: [android-test, ios-test]
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Get current date
  #       id: date
  #       run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

  #     - name: Get Commit Short Hash
  #       id: hash
  #       run: echo "hash=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_OUTPUT

  #     - name: Get Latest tag
  #       id: current_tag
  #       uses: "WyriHaximus/github-action-get-previous-tag@v1"

  #     - name: Get next minor version
  #       id: next_tag
  #       uses: "WyriHaximus/github-action-next-semvers@v1"
  #       with:
  #         version: ${{ steps.current_tag.outputs.tag }}

  #     - name: Add Release version file
  #       run: echo "Released ${{ steps.next_tag.outputs.patch }} Build" > ./ReleaseVersion.txt

  #     - name: Bump version and push tag
  #       id: tag_version
  #       uses: mathieudutour/github-tag-action@v6.0
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Archive Full Build
  #       uses: vimtor/action-zip@v1
  #       with:
  #         files: "./ReleaseVersion.txt"
  #         recursive: true
  #         dest: "Spotlight-release-${{github.run_number}}-${{steps.date.outputs.date}}-${{steps.hash.outputs.hash}}.zip"

  #     - name: Get latest release details
  #       id: release_details
  #       uses: cardinalby/git-get-release-action@v1
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       with:
  #         latest: true

  #     - name: Get Latest Release commit hash
  #       id: get_commit
  #       uses: actions/github-script@0.9.0
  #       with:
  #         script: |
  #           const commit = "${{fromJSON(steps.release_details.outputs.assets)[0].name}}".split('-').pop().split('.').shift();
  #           core.setOutput('commit', commit);
  #     - name: Create Release Notes from commit history
  #       id: list_messages
  #       run: git log --pretty=format:%s --ancestry-path ${{steps.get_commit.outputs.commit}}^..${{steps.hash.outputs.hash}} > ReleaseNotes.txt

  #     - name: Create a GitHub release
  #       uses: ncipollo/release-action@v1
  #       with:
  #         tag: ${{ steps.tag_version.outputs.new_tag }}
  #         name: Release ${{ steps.tag_version.outputs.new_tag }}
  #         bodyFile: "./ReleaseNotes.txt"
  #         artifacts: "Spotlight-release-${{github.run_number}}-${{steps.date.outputs.date}}-${{steps.hash.outputs.hash}}.zip"
  #         token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Print Release Version
  #       run: echo 'Released 1.0.${{steps.updated_version.outputs.result}} Build'

  # android:
  #   name: Build and Release APK
  #   needs: android-test
  #   runs-on: macos-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Download Version artifact
  #       uses: dawidd6/action-download-artifact@v2
  #       with:
  #         github_token: ${{secrets.GITHUB_TOKEN}}
  #         workflow: main.yml
  #         name: android-integration-released-version
  #         path: ./app/
  #         search_artifacts: true
  #         workflow_conclusion: ""
  #         if_no_artifact_found: ignore

  #     - name: Check file existence
  #       id: check_files
  #       uses: andstor/file-existence-action@v2
  #       with:
  #         files: "./app/AndroidVersionCode.txt"

  #     - name: File exists
  #       working-directory: ${{ env.WORKING_DIR }}
  #       if: steps.check_files.outputs.files_exists == 'true'
  #       run: echo "android_version_code=$(cat AndroidVersionCode.txt | cut -d "-" -f2-)" >> $GITHUB_ENV

  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16.x

  #     - name: Setup Java SDK ${{ env.JAVA_VERSION }}
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: "zulu"
  #         java-version: ${{ env.JAVA_VERSION }}

  #     - name: Update Version Code value
  #       id: updated_version
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           return parseInt("${{ env.android_version_code }}") + 1
  #     - name: Update gradle version for Android
  #       uses: damienaicheh/update-android-version-gradle-action@v1.0.0
  #       with:
  #         build-gradle-path: "./app/android/app/build.gradle"
  #         version-code: "${{steps.updated_version.outputs.result}}"
  #         version-name: "1.0.${{steps.updated_version.outputs.result}}"
  #         print-file: true

  #     - name: Install Ionic
  #       run: npm install -g @ionic/cli

  #     - name: Install app dependencies
  #       working-directory: ${{ env.WORKING_DIR }}
  #       run: npm install

  #     - name: Build App
  #       working-directory: ${{ env.WORKING_DIR }}
  #       run: npm run build

  #     - name: Build Android
  #       working-directory: ${{ env.WORKING_DIR }}
  #       run: ionic capacitor build android --minifycss --optimizejs --minifyjs --no-open --configuration=integration

  #     - name: Build app APK
  #       working-directory: ${{ env.WORKING_DIR }}/android
  #       run: gradle assemble

  #     - name: Extract Android signing key from env
  #       working-directory: ${{ env.WORKING_DIR }}
  #       run: |
  #         echo "${{ secrets.RELEASE_KEYSTORE }}" > ./android/release.jks.base64
  #         base64 -d ./android/release.jks.base64 > ./android/release.decrypted.jks
  #     - name: Align APK
  #       run: $ANDROID_HOME/build-tools/30.0.3/zipalign -f -v 4 ./app/android/app/build/outputs/apk/release/app-release-unsigned.apk ./app/android/app/build/outputs/apk/release/app-release-aligned.apk

  #     - name: Sign build
  #       run: $ANDROID_HOME/build-tools/30.0.3/apksigner sign --ks-pass pass:${{secrets.RELEASE_KEYSTORE_PASSWORD}} --key-pass pass:${{secrets.RELEASE_KEYSTORE_PASSWORD}} --ks ./app/android/release.decrypted.jks --ks-key-alias release --in ./app/android/app/build/outputs/apk/release/app-release-aligned.apk --out ./app/android/app/build/outputs/apk/release/app-release.apk

  #     - name: Upload APK to TestApp.io
  #       uses: testappio/github-action@v5
  #       with:
  #         api_token: ${{secrets.TESTAPPIO_API_TOKEN}}
  #         app_id: ${{secrets.TESTAPPIO_APP_ID}}
  #         file: ./app/android/app/build/outputs/apk/release/app-release.apk
  #         release_notes: "Testing manual release notes..."
  #         git_release_notes: false
  #         include_git_commit_id: false
  #         notify: true

  #     - name: Print deployed Release Version
  #       run: |
  #         echo "Build-${{steps.updated_version.outputs.result}}" > ./app/AndroidVersionCode.txt
  #     - name: Archive Android Code Version
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: android-integration-released-version
  #         path: ./app/AndroidVersionCode.txt

  # ios:
  #   needs: ios-test
  #   name: Build and Release IPA
  #   runs-on: macos-latest
  #   defaults:
  #     run:
  #       working-directory: ${{ env.WORKING_DIR }}

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Download Version artifact
  #       uses: dawidd6/action-download-artifact@v2
  #       with:
  #         github_token: ${{secrets.GITHUB_TOKEN}}
  #         workflow: main.yml
  #         name: ios-integration-released-version
  #         path: ./app/
  #         search_artifacts: true
  #         workflow_conclusion: ""
  #         if_no_artifact_found: ignore

  #     - name: Check file existence
  #       id: check_files
  #       uses: andstor/file-existence-action@v2
  #       with:
  #         files: "./app/iOSVersionCode.txt"

  #     - name: File exists
  #       if: steps.check_files.outputs.files_exists == 'true'
  #       run: echo "ios_version_code=$(cat iOSVersionCode.txt | cut -d "-" -f2-)" >> $GITHUB_ENV

  #     - name: Install the Apple certificate and provisioning profile
  #       env:
  #         BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  #         P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
  #         BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
  #         KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
  #         AUTH_KEY_BASE64: ${{ secrets.AUTH_KEY_BASE64 }}
  #       run: |
  #         # create variables
  #         CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
  #         echo $CERTIFICATE_PATH
  #         PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
  #         echo $PP_PATH
  #         KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
  #         echo $KEYCHAIN_PATH
  #         AUTH_KEY_PATH=$RUNNER_TEMP/auth_key.p8
  #         echo $AUTH_KEY_PATH
  #         # import certificates and provisioning profile from secrets
  #         echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
  #         echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
  #         echo -n "$AUTH_KEY_BASE64" | base64 --decode --output $AUTH_KEY_PATH
  #         # create temporary keychain
  #         security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #         security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
  #         security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #         # import certificate to keychain
  #         security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #         security list-keychain -d user -s $KEYCHAIN_PATH
  #         # apply provisioning profile
  #         mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #         cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
  #         echo "KEY_PATH=$AUTH_KEY_PATH" >> $GITHUB_ENV
  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16.x

  #     - name: Update iOS Bundle Version
  #       id: updated_ios_version
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           return parseInt("${{ env.ios_version_code }}") + 1
  #     - name: Update Plist version for iOS
  #       uses: damienaicheh/update-ios-version-info-plist-action@v1.0.0
  #       with:
  #         info-plist-path: "app/ios/App/App/Info.plist"
  #         bundle-version: "${{steps.updated_ios_version.outputs.result}}"
  #         bundle-short-version-string: "1.0.${{steps.updated_ios_version.outputs.result}}"
  #         print-file: true

  #     - name: Install Ionic
  #       run: npm install -g @ionic/cli

  #     - name: Install app dependencies
  #       run: npm install

  #     - name: Build App
  #       run: npm run build

  #     - name: Build iOS
  #       run: ionic capacitor build ios --minifycss --optimizejs --minifyjs --no-open --configuration=integration

  #     - name: Build with xCode
  #       run: xcodebuild -workspace ios/App/App.xcworkspace -scheme App clean archive -configuration Debug -sdk iphoneos DEVELOPMENT_TEAM=${{secrets.APPLE_DEV_TEAM}} -archivePath ios/App/App.xcarchive -authenticationKeyIssuerID ${{secrets.AUTH_KEY_ISSUER_ID}} -authenticationKeyID ${{secrets.KEY_ID}} -authenticationKeyPath ${{ env.KEY_PATH }} -allowProvisioningUpdates

  #     - name: Generate IPA file
  #       run: |
  #         cd ios/App/App.xcarchive/Products/Applications
  #         mkdir Payload
  #         cp -R App.app Payload
  #         zip -qyr App.ipa ./Payload
  #     - name: Upload IPA to TestApp.io
  #       uses: testappio/github-action@v5
  #       with:
  #         api_token: ${{secrets.TESTAPPIO_API_TOKEN}}
  #         app_id: ${{secrets.TESTAPPIO_APP_ID}}
  #         file: app/ios/App/App.xcarchive/Products/Applications/App.ipa
  #         release_notes: "Testing manual release notes..."
  #         git_release_notes: false
  #         include_git_commit_id: false
  #         notify: true

  #     - name: Print deployed Release Version
  #       run: |
  #         echo "Build-${{steps.updated_ios_version.outputs.result}}" > ./iOSVersionCode.txt
  #     - name: Archive iOS
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ios-integration-released-version
  #         path: ./app/iOSVersionCode.txt
